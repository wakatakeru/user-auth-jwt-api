// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/controllers/crypt_handler.go

// Package controllers is a generated GoMock package.
package controllers

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCryptHandler is a mock of CryptHandler interface.
type MockCryptHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCryptHandlerMockRecorder
}

// MockCryptHandlerMockRecorder is the mock recorder for MockCryptHandler.
type MockCryptHandlerMockRecorder struct {
	mock *MockCryptHandler
}

// NewMockCryptHandler creates a new mock instance.
func NewMockCryptHandler(ctrl *gomock.Controller) *MockCryptHandler {
	mock := &MockCryptHandler{ctrl: ctrl}
	mock.recorder = &MockCryptHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptHandler) EXPECT() *MockCryptHandlerMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockCryptHandler) Hash(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockCryptHandlerMockRecorder) Hash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockCryptHandler)(nil).Hash), arg0)
}

// Verify mocks base method.
func (m *MockCryptHandler) Verify(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockCryptHandlerMockRecorder) Verify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockCryptHandler)(nil).Verify), arg0, arg1)
}
